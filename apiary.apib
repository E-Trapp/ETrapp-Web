FORMAT: 1A
HOST: http://etrapp-server.tld/etrapp-server/v1

# ETrapp

ETrapp backend API description.

## Authentication [/auth]
Handle authentication status

### Authenticate [POST]

+ Request (application/json)

        {
            "username": "test_user",
            "password": "test_password
        }

+ Response 200 (application/json)

        {
            "id": 1,
            "username": "user",
            "token": "4e52c25c-bd37-49ba-b0c1-dc40f0af6c2a",
            "firstName": "Test",
            "lastName": "User",
            "email": "test@fake.com",
            "avatarUrl": "/my_avatar.png"
        }
+ Response 422

    Returned if user was not found or the password is not correct
    + Body

### Deauthenticate [DELETE]

+ Request 

    + Headers
    
            Authorization: Bearer {token}
+ Response 200

    Deauth completed without problems.
    + Body
+ Response 401

    Error, no authorization token provided
    + Body
    
## Events [/events{?start,max}]   
Endpoint to manage events

### List all events [GET]
Retrieve paginated list of events

+ Parameters

    + start (optional, Number) ... Record offset.
    + max (optional, Number) ... maximum number of records expected by client.
    
+ Response 200 (application/json)

        [
            {
                "id": 1,
                "owner": 1,
                "title": "sample_event1",
                "category": 3,
                "description": "event 1 description",
                "startsAt": 1512428277370
            },
            {
                "id": 2,
                "owner": 2,
                "title": "sample_event2",
                "category": 4,
                "description": "event 2 description",
                "startsAt": 1512177548342
            }
        ]
        
### Create an event [POST]

+ Request (application/json)

    + Headers
    
            Authorization: Bearer {token}
    + Body
    
            {
                "title": "sample_event",
                "description": "event description",
                "category" : 2
                "startsAt": 1512177548342
            }

            
+ Response 201

    Event created
    + Body

## Event [/events/{id}]

+ Parameters

    + id (required, Number, `1`) ... Numeric `id` of the Event to perform actions on.

### Edit an event [PATCH]

+ Request

    + Headers

            Authorization: Bearer {token}

    + Body

            {
                "description": "newDescription"
            }

+ Response 200


### Delete an event [DELETE]

+ Request

    + Headers
    
            Authorization: Bearer {token}
            
+ Response 204
    
    Event deleted
    + Body
    
## Event Messages [/events/{id}/messages{?start,max}]
Message stream in the specified event.

+ Parameters

    + id (required, Number, `1`) ... Numeric `id` of the Event to perform actions on.
    
### List all messages [GET]

+ Parameters

    + start (optional, Number) ... Record offset.
    + max (optional, Number) ... maximum number of records expected by client.+ Reponse 200 (application/json)

+ Response 200 (application/json)

    + Body
    
            [
                {
                    "message": "testMessage",
                    "userId": 1
                },
                {
                    "message": "testMessage2",
                    "userId": 1
                }
            ]

### Write a message [POST]
+ Request (application/json)

    + Headers
            
            Authorization: Bearer {token}
    + Body
    
            {
                "message": "testMessage"
            }
            
+ Response 201

    + Headers
    
            Location: /events/{id}/messages/{messageIndex}
            
## Users [/users]

### Create new user [POST]

+ Request (application/json)

        {
            "username": "test_user",
            "password": "testpassword",
            "email": "test@fake.com",
            "firstName":"Test",
            "lastName": "Testerson"
        }

+ Response 201

    + Headers
    
            Location: /users/{id}

## User [/users/{id}]

+ Parameters

    + id (required, Number, `1`) ... Numeric `id` of the User to perform action with.
    
### Get user [GET]

+ Request

    + Headers
            
            Authorization: Bearer {token}

+ Response 200 (application/json)

        {
            "id": 1,
            "username": "test_user",
            "email": "test@fake.com",
            "firstName":"Test",
            "lastName": "Testerson"
        }